# -*- python -*-
# ex: set filetype=python:

import os
import configparser
import datetime
from buildbot.plugins import changes
from buildbot.plugins import reporters
from buildbot.plugins import schedulers
from buildbot.plugins import steps
from buildbot.plugins import util
from buildbot.plugins import worker

BuildmasterConfig = c = {}

####### CONSTANTS

REPO = 'git://git.openafs.org/openafs.git'
ALL_BRANCHES = ('master', 'openafs-stable-1_8_x', 'openafs-stable-1_6_x')

####### LOCAL SETTINGS

settings_ini = os.path.expanduser(os.path.join(basedir, 'settings.ini'))
settings = configparser.ConfigParser()
settings.read([settings_ini])

####### FEATURES

c['buildbotNetUsageData'] = None # Disable phone-home feature.

####### WORKERS

c['protocols'] = {'pb': {'port': 9986}}

worker_config = {
    'example-worker1': dict(max_builds=1),
}

c['workers'] = []
for name,password in settings.items('workers'):
    kwargs = worker_config.get(name, {})
    c['workers'].append(worker.Worker(name, password, **kwargs))

####### CHANGESOURCES

c['change_source'] = [
    changes.GerritChangeSource(
        gerritserver='gerrit.openafs.org',
        gerritport=29418,
        username='buildbot',
        identity_file=os.path.expanduser('~/.ssh/gerrit'),
        debug=False,
    ),
]

####### BUILD STEPS

def shell(*args, timeout=3600, **kwargs):
    return steps.ShellCommand(command=args, timeout=timeout, **kwargs)

def sleep(seconds=120):
    return shell('sleep', seconds)

def wsleep(seconds=120):
    # Sleep variant for windows.
    return shell('ping', '-n', seconds, 'localhost')

def checkout():
    return steps.Gerrit(repourl=REPO, mode='full', method='fresh', retryFetch=True, timeout=3600)

def git_show():
    return shell('git', 'log', '-n', '1', '--stat')

def regen(quick=False, **kwargs):
    args = ['/bin/sh', 'regen.sh']
    if quick:
        args.append('-q')
    return shell(*args, name='regen', **kwargs)

def configure(*args, **kwargs):
    return steps.Configure(command=['./configure'] + list(args), **kwargs)

def make(*targets, cmd='make', target=None, jobs=None, **kwargs):
    args = [cmd]
    if jobs:
        args.append('-j{0}'.format(jobs))
    if len(targets) != 0:
        args += targets
    return steps.Compile(command=args, **kwargs)

####### BUILD FACTORIES

factories = {}

def add_factory(name, *steps):
    factories[name] = util.BuildFactory(steps)

add_factory('generic',
    sleep(),
    checkout(),
    regen(),
    configure(),
    make(),
)

# XXX: The git clean/git gc steps were cargo culted from the
#      old buildbot master config.

add_factory('irix',
    sleep(),
    checkout(),
    git_show(),
    shell('git', 'clean', '-X', '-f', '-e', '!.buildbot-sourcedata'),
    shell('git', 'gc', '--auto'),
    regen(),
    configure(
        '--enable-checking',
        '--enable-supergroups',
        '--enable-namei-fileserver',
        '--with-krb5=/usr/nekoware',
        '--enable-pthreaded-ubik',
    ),
    make(cmd='gmake'),   #TODO: , warningPattern='.*cc:? WARNING'),
    make('dest')         #TODO: , warningPattern='.*cc:? WARNING'),
)

add_factory('linux',
    sleep(),
    checkout(),
    git_show(),
    shell('git', 'clean', '-d', '-x', '-f', '-e', '.buildbot-sourcedata'),
    shell('git', 'clean', '-d', '-X', '-f', '-e', '!.buildbot-sourcedata'),
    shell('git', 'gc', '--auto'),
    regen(),
    configure(
        '--enable-checking',
        '--enable-supergroups',
        '--enable-namei-fileserver',
        '--enable-pthreaded-ubik',
    ),
    make(),
)

add_factory('linux-no-checking',
    sleep(),
    checkout(),
    regen(),
    configure(
        '--disable-checking',
        '--enable-supergroups',
        '--enable-namei-fileserver',
        '--enable-pthreaded-ubik',
    ),
    make(),
)

add_factory('rhel6',
    sleep(),
    checkout(),
    git_show(),
    shell('git', 'clean', '-x', '-f', '-d'),
    shell('git', 'gc', '--auto'),
    regen(),
    configure('--enable-supergroups', '--enable-namei-fileserver', '--enable-pthreaded-ubik'),
    make(jobs=4),
    make('dest', jobs=4),
)

add_factory('fedora20',
    sleep(),
    checkout(),
    git_show(),
    shell('git', 'clean', '-d', '-x', '-f', '-e', '.buildbot-sourcedata'),
    shell('git', 'clean', '-d', '-X', '-f'),
    shell('git', 'gc', '--auto'),
    regen(),
    configure('--enable-supergroups', '--enable-namei-fileserver', '--enable-pthreaded-ubik'),
    make(jobs=4),
    make('dest', jobs=4),
)

add_factory('fedora21',
    sleep(),
    checkout(),
    git_show(),
    shell('git', 'clean', '-d', '-x', '-f', '-e', '.buildbot-sourcedata'),
    shell('git', 'clean', '-d', '-X', '-f'),
    shell('git', 'gc', '--auto'),
    regen(),
    configure('--enable-supergroups', '--enable-namei-fileserver', '--enable-pthreaded-ubik'),
    make(jobs=4),
    make('dest', jobs=4),
)

add_factory('fedora',
    sleep(),
    checkout(),
    git_show(),
    shell('git', 'clean', '-d', '-x', '-f', '-e', '.buildbot-sourcedata'),
    shell('git', 'clean', '-d', '-X', '-f'),
    shell('git', 'gc', '--auto'),
    regen(),
    configure(
        '--enable-supergroups',
        '--enable-namei-fileserver',
        '--enable-pthreaded-ubik',
        '--disable-kernel-module',
        '--with-afs-sysname=amd64_linux26',
    ),
    make(jobs=4),
    make('dest', jobs=4),
)

add_factory('suse',
    sleep(),
    checkout(),
    git_show(),
    shell('git', 'gc', '--auto'),
    shell('git', 'clean', '-X', '-f', '-e', '!.buildbot-sourcedata'),
    regen(),
    configure(
        '--enable-checking',
        '--enable-supergroups',
        '--enable-namei-fileserver',
        '--enable-pthreaded-ubik',
        '--with-linux-kernel-build=/usr/src/linux-obj/x86_64/default',
    ),
    make(),
    make('dest'),
)

add_factory('suse-tumbleweed',
    sleep(),
    checkout(),
    git_show(),
    shell('git', 'clean', '-X', '-f', '-e', '!.buildbot-sourcedata'),
    shell('git', 'gc', '--auto'),
    regen(),
    configure(
        '--enable-checking',
        '--enable-supergroups',
        '--enable-namei-fileserver',
        '--enable-pthreaded-ubik',
        '--with-linux-kernel-build=/usr/src/linux-obj/x86_64/default',
    ),
    make(),
    make('dest'),
)

add_factory('mac-intel',
    sleep(),
    checkout(),
    git_show(),
    shell('git', 'gc', '--auto'),
    shell('git', 'clean', '-X', '-f', '-d', '-e', '!.buildbot-sourcedata'),
    regen(),
    configure(
        '--enable-transarc-paths',
        '--enable-pthreaded-ubik',
        '--enable-warnings',
        '--disable-pam',
    ),
    make('dest'),
)

add_factory('debian',
    sleep(),
    checkout(),
    git_show(),
    regen(),
    configure(
        '--enable-supergroups',
        '--enable-namei-fileserver',
        '--enable-pthreaded-ubik',
    ),
    make(jobs=5),
)

add_factory('freebsd100',
    sleep(),
    checkout(),
    git_show(),
    shell('git', 'clean', '-X', '-f', '-e', '!.buildbot-sourcedata'),
    shell('git', 'gc', '--auto'),
    regen(),
    configure(
        '--enable-supergroups',
        '--enable-warnings',
        '--enable-namei-fileserver',
        '--with-bsd-kernel-headers=/usr/src/sys',
        '--with-bsd-kernel-build=/usr/obj/usr/src/sys/GENERIC',
    ),
    make(),
    make('dest'),
)

add_factory('solaris10_x86',
    sleep(),
    checkout(),
    git_show(),
    shell('git', 'clean', '-X', '-f', '-e', '!.buildbot-sourcedata'),
    shell('git', 'gc', '--auto'),
    regen(),
    configure(
        '--enable-debug',
        '--disable-optimize',
        '--enable-debug-kernel',
        '--disable-optimize-kernel',
        '--enable-transarc-paths',
        '--enable-namei-fileserver',
    ),
    make(),
    make('dest'),
)

add_factory('solaris11_x86',
    sleep(),
    checkout(),
    git_show(),
    shell('git', 'clean', '-X', '-f', '-e', '!.buildbot-sourcedata'),
    shell('git', 'gc', '--auto'),
    regen(),
    configure(
        '--enable-debug',
        '--disable-optimize',
        '--enable-debug-kernel',
        '--disable-optimize-kernel',
        '--enable-transarc-paths',
        '--enable-namei-fileserver',
    ),
    make(),
    make('dest'),
)

add_factory('centos73',
    sleep(),
    checkout(),
    git_show(),
    shell('git', 'clean', '-x', '-f', '-d'),
    shell('git', 'gc', '--auto'),
    regen(),
    regen(),
    configure(
        '--enable-checking',
        '--enable-transarc-paths',
        '--enable-supergroups',
        '--enable-pthreaded-ubik',
    ),
    make(),
    make('dest'),
)

add_factory('ubuntu1610',
    sleep(),
    checkout(),
    git_show(),
    shell('git', 'clean', '-x', '-f', '-d'),
    shell('git', 'gc', '--auto'),
    regen(),
    regen(),
    configure(
        '--enable-checking',
        '--enable-transarc-paths',
        '--enable-supergroups',
        '--enable-pthreaded-ubik'
    ),
    make(),
    make('dest'),
)

# Windows factories.
for arch in ('amd64', 'x86'):
    for variant in ('free', 'checked'):
        add_factory(
            'win_%s_%s' % (arch, variant),
            wsleep(),
            checkout(),
            shell('build-openafs.cmd', arch, variant),
        )

# Linux-rc factory.
add_factory('linux-rc',
    shell(
        '/usr/local/bin/virt-run',
        '--base', 'ubuntu1804',
        '--base-prefix', 'zz-',
        '--clone-prefix', 'tmp-',
        '--user', 'buildbot',
        '--wait', '30',
        util.WithProperties('kernel-ppa get %(linux_kernel_ppa:-)s'),
        'sudo kernel-ppa install',
        '@reboot',
        'uname -a',
        'gcc --version',
        'mkdir openafs',
        '@cd openafs',
        'git init',
        util.WithProperties('git fetch --quiet https://gerrit.openafs.org/openafs.git %(branch)s'),
        'git reset --hard FETCH_HEAD',
        'git --no-pager log -n1 --stat',
        './regen.sh',
        './configure',
        'make',
    ),
)

# TODO: port ScanBuild
#add_factory('scan-build',
#    checkout(),
#    git_show(),
#    regen(quick=True),
#    configure('--enable-debug', '--enable-debug-kernel'),
#    ScanBuild(
#    make=['make', '-j', '4', 'all'],
#    output='/afs/sinenomine.net/public/openafs/scan-build',
#    baseurl='https://download.sinenomine.net',
#    docroot='/afs/sinenomine.net/public'),
#)

####### BUILD QUEUES

c['builders'] = []

_schedulers = {}
_builders = set()

def add_builder(enabled=False, name=None, factory=None, worker=None,
                gerrit=None, nightly=None, env=None):
    if name is None:
        raise ValueError('builder requires a name')
    if factory is None:
        raise ValueError('builder requires a factory')
    if worker is None:
        worker = name # default to the builder name
    if not enabled:
        return
    def schedule(trigger, branches):
        if isinstance(branches, str):
            branches = [branches]
        for branch in branches:
            s = (trigger, branch)
            if s not in _schedulers:
                _schedulers[s] = set()
            _schedulers[s].add(name)
    if gerrit:
        schedule('gerrit', gerrit)
    if nightly:
        schedule('nightly', nightly)
    _builders.add(name)
    c['builders'].append(util.BuilderConfig(
        name=name,
        workernames=[worker],
        factory=factories[factory],
        canStartBuild=util.enforceChosenWorker, # for force build
        env=env,
    ))

add_builder(
    name='centos7-arm64',
    factory='linux',
    nightly=['master'],
)

add_builder(
    name='centos73-x86_64',
    factory='centos73',
    gerrit=ALL_BRANCHES,
)

add_builder(
    name='debian8-amd64',
    factory='debian',
    nightly=['master', 'openafs-stable-1_8_x'],
)

add_builder(
    name='debian8-i386',
    factory='debian',
    nightly=['master', 'openafs-stable-1_8_x'],
)

add_builder(
    name='debian87-x86_64',
    factory='debian',
    nightly=ALL_BRANCHES,
)

add_builder(
    name='debian9-amd64',
    factory='debian',
    gerrit=ALL_BRANCHES,
    nightly=ALL_BRANCHES,
)

add_builder(
    name='fedora20-x86_64',
    factory='fedora20',
    nightly=['master'],
)

add_builder(
    name='fedora21-x86_64',
    factory='fedora21',
    nightly=['master'],
)

add_builder(
    name='fedora22-x86_64',
    factory='fedora',
    nightly=['master'],
)

add_builder(
    name='fedora23-x86_64',
    factory='fedora',
    nightly=['master'],
)

add_builder(
    name='fedora24-x86_64',
    factory='fedora',
    nightly=['master'],
)

add_builder(
    name='fedora25-x86_64',
    factory='fedora',
    nightly=['master'],
)

add_builder(
    name='fedora26-x86_64',
    factory='fedora',
    gerrit=ALL_BRANCHES,
    nightly=ALL_BRANCHES,
)

add_builder(
    name='fedora27-x86_64',
    factory='fedora',
    gerrit=ALL_BRANCHES,
    nightly=ALL_BRANCHES,
)

add_builder(
    enabled=True,
    name='fedora28-x86_64',
    factory='fedora',
    gerrit=ALL_BRANCHES,
    nightly=ALL_BRANCHES,
)

add_builder(
    name='irix',
    factory='irix',
    worker='sgi_irix_65-64bit',
    nightly=['openafs-stable-1_6_x'],
    env={'CC': 'cc'},
)

add_builder(
    name='linux-rc-x86_64',
    factory='linux-rc',
)

add_builder(
    name='macos10-12-x86_64',
    factory='mac-intel',
    nightly=['master', 'openafs-stable-1_8_x'],
    env={
        'ARCHFLAGS': '-arch x86_64',
        'LD_LIBRARY_PATH': '/opt/local/lib',
        'PATH': ':'.join([
            '/usr/local/git/bin',
            '/usr/bin:/bin',
            '/usr/sbin:/sbin',
            '/usr/local/bin',
            '/opt/X11/bin',
            '/opt/local/bin',
            '/opt/local/sbin',
        ]),
    }
)

add_builder(
    name='opensuse-tumbleweed-i386',
    factory='suse-tumbleweed',
    nightly=['master', 'openafs-stable-1_8_x'],
    env={'CFLAGS':'-Wno-error=format-truncation'}, # work-around current build errors
)

add_builder(
    name='opensuse-tumbleweed-x86_64',
    factory='suse-tumbleweed',
    nightly=['master', 'openafs-stable-1_8_x'],
    env={'CFLAGS':'-Wno-error=format-truncation'}, # work-around current build errors
)

add_builder(
    name='opensuse12-x86_64',
    factory='suse',
    gerrit=ALL_BRANCHES,
)

add_builder(
    name='opensuse13-arm',
    factory='linux',
    nightly=['master', 'openafs-stable-1_8_x'],
)

add_builder(
    name='rhel6-x86_64',
    factory='rhel6',
    nightly=['master', 'openafs-stable-1_8_x'],
)

# TODO
#add_builder(
#    name='scan-build',
#    factory='scan-build',
#    worker='scan-build',
#)

add_builder(
    name='solaris10_x86',
    factory='solaris10_x86',
    worker='sun510_x86',
    gerrit=ALL_BRANCHES,
)

add_builder(
    name='solaris11_x86',
    factory='solaris11_x86',
    worker='sun511_x86',
    gerrit=ALL_BRANCHES,
)

add_builder(
    name='ubuntu14-x86_64',
    factory='linux',
    gerrit=['master', 'openafs-stable-1_8_x'],
)

add_builder(
    name='ubuntu1610-x86_64',
    factory='ubuntu1610',
    nightly=['master', 'openafs-stable-1_8_x'],
)

add_builder(
    enabled=True,
    name='ubuntu1804-amd64',
    factory='linux-no-checking',
    gerrit=ALL_BRANCHES,
    nightly=ALL_BRANCHES,
)

add_builder(
    name='win7-amd64-checked',
    factory='win_amd64_checked',
    worker='win7-amd64',
    gerrit=['master', 'openafs-stable-1_8_x'],
)

add_builder(
    name='win7-amd64-free',
    factory='win_amd64_free',
    worker='win7-amd64',
    gerrit=['master', 'openafs-stable-1_8_x'],
)

add_builder(
    name='win7-x86-checked',
    factory='win_x86_checked',
    worker='win7-amd64',
    gerrit=['master', 'openafs-stable-1_8_x'],
)

add_builder(
    name='win7-x86-free',
    factory='win_x86_free',
    worker='win7-amd64',
    gerrit=['master', 'openafs-stable-1_8_x'],
)

####### SCHEDULERS

c['schedulers'] = []

def add_branch_scheduler(branch, builders):
    c['schedulers'].append(schedulers.SingleBranchScheduler(
        name='gerrit-' + branch,
        change_filter=util.ChangeFilter(branch_re='^{0}/.*'.format(branch)),
        treeStableTimer=None, # Schedule immediately to build all changes.
        builderNames=builders,
    ))

def add_nightly_scheduler(branch, hour, minute, builders):
    c['schedulers'].append(schedulers.Nightly(
        name='nightly-' + branch,
        branch=branch,
        builderNames=builders,
        hour=hour, minute=minute,
    ))

def add_force_scheduler(builders):
    c['schedulers'].append(schedulers.ForceScheduler(
        name='force',
        builderNames=builders,
        properties=[util.WorkerChoiceParameter()],
    ))

def next_time(hour, minute):
    return ((hour + 1) % 24, minute)

def add_schedulers():
    hour,minute = 0,0
    for s in _schedulers:
        trigger,branch = s
        builders = list(_schedulers[s])
        if trigger == 'gerrit':
            add_branch_scheduler(branch, builders)
        elif trigger == 'nightly':
            add_nightly_scheduler(branch, hour, minute, builders)
            hour,minute = next_time(hour,minute)
        else:
            raise AssertionError('bad trigger name: ' + trigger)
    add_force_scheduler(list(_builders))

add_schedulers()

####### BUILDBOT SERVICES

def gerrit_summary_callback(buildInfoList, results, status, arg):
    from twisted.python import log
    success = False
    failure = False
    msgs = ['New Buildbot Master', '']
    for buildInfo in buildInfoList:
        msg = "Builder %(name)s %(resultText)s (%(text)s)" % buildInfo
        link = buildInfo.get('url', None)
        if link:
            msg += " - " + link
        else:
            msg += "."
        msgs.append(msg)
        if buildInfo['result'] == util.SUCCESS:
            success = True
        else:
            failure = True
    message = '\n\n'.join(msgs)
    if success and not failure:
        verified = 1
    else:
        verified = 0
    return dict(message=message,
                labels={'Verified': verified})

c['services'] = [
    reporters.GerritStatusPush(
        server='gerrit.openafs.org',
        #username='buildbot',
        username='mmeffie', # TESTING!
        port=29418,
        #identity_file=os.path.expanduser('~/.ssh/gerrit'),
        identity_file=os.path.expanduser('~/.ssh/mmeffie-gerrit'), # TESTING!
        summaryCB=gerrit_summary_callback,
    ),
]

####### WEB UI

c['title'] = 'OpenAFS Buildbot'
c['titleURL'] = 'https://www.openafs.org/'
c['buildbotURL'] = settings.get('local', 'buildbotURL', fallback='http://buildbot.openafs.org:8011/')

auth = util.UserPasswordAuth(settings.items('admins'))
authz = util.Authz(
    allowRules=[
        util.AnyControlEndpointMatcher(role='admins'),
    ],
    roleMatchers=[
        util.RolesFromEmails(admins=settings.options('admins'))
    ],
)

c['www'] = {
    'port': 8011,
    'auth': auth,
    'authz': authz,
    'plugins': {
        'waterfall_view': {},
        'console_view': {},
        'grid_view': {},
    },
}

####### DATA HORIZON

c['configurators'] = [
    # Delete all logs older than one month every Sunday at noon.
    util.JanitorConfigurator(
        logHorizon=datetime.timedelta(weeks=4),
        hour=12,
        dayOfWeek=6
    ),
]

####### DB URL

c['db'] = {'db_url' : 'sqlite:///state.sqlite'}
