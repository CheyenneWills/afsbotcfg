# -*- python -*-
# ex: set filetype=python:

import os
from buildbot.plugins import worker
from buildbot.plugins import changes
from buildbot.plugins import schedulers
from buildbot.plugins import steps
from buildbot.plugins import util

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### FEATURES

c['buildbotNetUsageData'] = None # Disable phone-home feature.

####### WORKERS

passwords = {}
passfile = os.path.expanduser(os.path.join(basedir, 'passwords'))
with open(passfile, 'r') as f:
    for line in f:
        line = line.strip()
        if line:
            name,password = line.split()
            passwords[name] = password

class MissingPassword(Exception):
    pass

class Worker(worker.Worker):
    def __init__(self, name, **kwargs):
        try:
            password = passwords[name]
        except KeyError:
            raise MissingPassword("Missing password for worker '{0}'.".format(name))
        worker.Worker.__init__(self, name, password, **kwargs)

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [Worker("deb9-amd64")]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9986}}

####### CHANGESOURCES

c['change_source'] = []
# TODO: add gerrit change source

####### SCHEDULERS

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["build"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["build"]))

####### BUILDERS

factory = util.BuildFactory()
factory.addStep(steps.Git(repourl='git://git.openafs.org/openafs.git', mode='full', method='fresh'))
factory.addStep(steps.ShellCommand(command=["./regen.sh"]))
factory.addStep(steps.Configure())
factory.addStep(steps.ShellCommand(command=["make"]))

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="build",
      workernames=["deb9-amd64"],
      factory=factory))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "OpenAFS Buildbot"
c['titleURL'] = "https://www.openafs.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://buildbot.openafs.org:8011/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8011,
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
