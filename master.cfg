# -*- python -*-
# ex: set filetype=python:

import os
import configparser
from buildbot.plugins import worker
from buildbot.plugins import changes
from buildbot.plugins import schedulers
from buildbot.plugins import steps
from buildbot.plugins import util

BuildmasterConfig = c = {}

####### LOCAL SETTINGS

settings_ini = os.path.expanduser(os.path.join(basedir, 'settings.ini'))
settings = configparser.ConfigParser()
settings.read([settings_ini])

####### FEATURES

c['buildbotNetUsageData'] = None # Disable phone-home feature.

####### WORKERS

class MissingPassword(Exception):
    pass

class Worker(worker.Worker):
    def __init__(self, name, **kwargs):
        try:
            password = settings['workers'][name]
        except KeyError:
            raise MissingPassword("Missing password for worker '{0}'.".format(name))
        worker.Worker.__init__(self, name, password, **kwargs)

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [Worker("deb9-amd64")]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9986}}

####### CHANGESOURCES

c['change_source'] = []
# TODO: add gerrit change source

####### SCHEDULERS

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["build"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["build"]))

####### BUILDERS

factory = util.BuildFactory()
factory.addStep(steps.Git(repourl='git://git.openafs.org/openafs.git', mode='full', method='fresh'))
factory.addStep(steps.ShellCommand(command=["./regen.sh"]))
factory.addStep(steps.Configure())
factory.addStep(steps.ShellCommand(command=["make"]))

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="build",
      workernames=["deb9-amd64"],
      factory=factory))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

####### WEB UI

c['title'] = "OpenAFS Buildbot"
c['titleURL'] = "https://www.openafs.org/"
c['buildbotURL'] = settings.get("local", "buildbotURL", fallback="http://buildbot.openafs.org:8011/")

auth = util.UserPasswordAuth(settings.items('admins'))
authz = util.Authz(
    allowRules=[
        util.AnyControlEndpointMatcher(role="admins"),
    ],
    roleMatchers=[
        util.RolesFromEmails(admins=settings.options('admins'))
    ],
)

c['www'] = {
    'port': 8011,
    'auth': auth,
    'authz': authz,
    'plugins': {
        'waterfall_view': {},
        'console_view': {},
        'grid_view': {},
    },
}

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
