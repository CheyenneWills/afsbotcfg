# -*- python -*-
# ex: set filetype=python:

import os
import configparser
import datetime
from buildbot.plugins import changes
from buildbot.plugins import reporters
from buildbot.plugins import schedulers
from buildbot.plugins import steps
from buildbot.plugins import util
from buildbot.plugins import worker

BuildmasterConfig = c = {}

####### REPOSITORY INFO

REPO = 'git://git.openafs.org/openafs.git'
BRANCHES = ['master', 'openafs-stable-1_8_x', 'openafs-stable-1_6_x']

####### LOCAL SETTINGS

settings_ini = os.path.expanduser(os.path.join(basedir, 'settings.ini'))
settings = configparser.ConfigParser()
settings.read([settings_ini])

####### FEATURES

c['buildbotNetUsageData'] = None # Disable phone-home feature.

####### WORKERS

c['protocols'] = {'pb': {'port': 9989}}

worker_config = {
    'linux-rc-x86_64': dict(max_builds=1),
}

c['workers'] = []
for name,password in settings.items('workers'):
    kwargs = worker_config.get(name, {})
    c['workers'].append(worker.Worker(name, password, **kwargs))

####### CHANGESOURCES

c['change_source'] = [
    changes.GerritChangeSource(
        gerritserver='gerrit.openafs.org',
        gerritport=29418,
        username='buildbot',
        identity_file=os.path.expanduser('~/.ssh/gerrit'),
        debug=False,
    ),
]

####### BUILD STEPS

def scheduler_is_gerrit(step):
    return step.getProperty('scheduler').startswith('gerrit')

def shell(*args, timeout=3600, **kwargs):
    return steps.ShellCommand(command=args, timeout=timeout, **kwargs)

def sleep():
    # Delay to allow gerrit commits to be ready.
    return shell('sleep', '120', name='sleep', doStepIf=scheduler_is_gerrit)

def wsleep():
    # Delay to allow gerrit commits to be ready; variant for windows.
    return shell('ping', '-n', '120', 'localhost', name='sleep', doStepIf=scheduler_is_gerrit)

def git_checkout():
    return steps.Gerrit(repourl=REPO, mode='full', method='fresh', retryFetch=True, timeout=3600)

def git_show():
    return shell('git', 'log', '-n', '1', '--stat', name='git show')

def git_gc():
    return shell('git', 'gc', '--auto', name='git gc')

def regen(quick=False, **kwargs):
    args = ['/bin/sh', 'regen.sh']
    if quick:
        args.append('-q')
    return shell(*args, name='regen', **kwargs)

def configure(*args, **kwargs):
    return steps.Configure(command=['./configure'] + list(args), **kwargs)

def make(*targets, cmd='make', target=None, jobs=None, **kwargs):
    args = [cmd]
    if jobs:
        args.append('-j{0}'.format(jobs))
    if len(targets) != 0:
        args += targets
    return steps.Compile(command=args, **kwargs)

####### BUILD FACTORIES

factories = {}

def add_factory(name, *steps):
    factories[name] = util.BuildFactory(steps)

add_factory('linux',
    sleep(),
    git_checkout(),
    git_show(),
    git_gc(),
    regen(),
    configure(
        '--enable-checking',
        '--enable-supergroups',
        '--enable-namei-fileserver',
        '--enable-pthreaded-ubik',
    ),
    make(),
)

add_factory('linux-parallel',
    sleep(),
    git_checkout(),
    git_show(),
    git_gc(),
    regen(),
    configure(
        '--enable-warnings',
        '--enable-checking',
        '--enable-supergroups',
        '--enable-namei-fileserver',
        '--enable-pthreaded-ubik',
    ),
    make(jobs=4),
)

add_factory('linux-parallel-nocheck',
    sleep(),
    git_checkout(),
    git_show(),
    git_gc(),
    regen(),
    configure(
        '--disable-checking',
        '--enable-supergroups',
        '--enable-namei-fileserver',
        '--enable-pthreaded-ubik',
    ),
    make(jobs=4),
)

add_factory('linux-no-checking',
    sleep(),
    git_checkout(),
    git_show(),
    git_gc(),
    regen(),
    configure(
        '--disable-checking',
        '--enable-supergroups',
        '--enable-namei-fileserver',
        '--enable-pthreaded-ubik',
    ),
    make(),
)

add_factory('linux-no-kmod',
    sleep(),
    git_checkout(),
    git_show(),
    git_gc(),
    regen(),
    configure(
        '--enable-supergroups',
        '--enable-namei-fileserver',
        '--enable-pthreaded-ubik',
        '--disable-kernel-module',
        '--with-afs-sysname=amd64_linux26',
    ),
    make(jobs=4),
)

add_factory('linux-suse',
    sleep(),
    git_checkout(),
    git_show(),
    git_gc(),
    regen(),
    configure(
        '--enable-checking',
        '--enable-supergroups',
        '--enable-namei-fileserver',
        '--enable-pthreaded-ubik',
        '--with-linux-kernel-build=/usr/src/linux-obj/x86_64/default',
    ),
    make(),
)

add_factory('macos',
    sleep(),
    git_checkout(),
    git_show(),
    git_gc(),
    regen(),
    configure(
        '--enable-transarc-paths',
        '--enable-pthreaded-ubik',
        '--enable-warnings',
        '--disable-pam',
    ),
    make('dest'),
)

add_factory('freebsd',
    sleep(),
    git_checkout(),
    git_show(),
    git_gc(),
    regen(),
    configure(
        '--enable-supergroups',
        '--enable-warnings',
        '--enable-namei-fileserver',
        '--with-bsd-kernel-headers=/usr/src/sys',
        '--with-bsd-kernel-build=/usr/obj/usr/src/sys/GENERIC',
    ),
    make('dest'),
)

add_factory('solaris',
    sleep(),
    git_checkout(),
    git_show(),
    git_gc(),
    regen(),
    configure(
        '--enable-debug',
        '--disable-optimize',
        '--enable-debug-kernel',
        '--disable-optimize-kernel',
        '--enable-transarc-paths',
        '--enable-namei-fileserver',
    ),
    make('dest'),
)

add_factory('irix',
    sleep(),
    git_checkout(),
    git_show(),
    git_gc(),
    regen(),
    configure(
        '--enable-checking',
        '--enable-supergroups',
        '--enable-namei-fileserver',
        '--with-krb5=/usr/nekoware',
        '--enable-pthreaded-ubik',
    ),
    make(cmd='gmake'),
    make('dest')
)

add_factory('linux-rc',
    shell('virt-run-build.sh',
        '--branch', util.Property('branch', default='master'),
        '--linux', util.Property('linux-kernel-ppa', default='rc'),
        '--smoke-test',
        name='virt-run-build',
    ),
)

add_factory('win7',
    wsleep(),
    git_checkout(),
    git_show(),
    git_gc(),
    shell('build-openafs.cmd',
        util.Property('arch', default='amd64'),
        util.Property('variant', default='free'),
        name='build-openafs'),
)

# TODO: port ScanBuild
#add_factory('scan-build',
#    git_checkout(),
#    git_show(),
#    git_gc(),
#    regen(quick=True),
#    configure('--enable-debug', '--enable-debug-kernel'),
#    ScanBuild(
#    make=['make', '-j', '4', 'all'],
#    output='/afs/sinenomine.net/public/openafs/scan-build',
#    baseurl='https://download.sinenomine.net',
#    docroot='/afs/sinenomine.net/public'),
#)

####### BUILDERS

c['builders'] = []
_builders = {} # for schedulers

def verify_branches(branches):
    if not branches or branches == 'none':
        branches = []
    elif branches == '*' or branches == 'all':
        branches = BRANCHES
    elif isinstance(branches, str):
        branches = [branches]
    for branch in branches:
        if not branch in BRANCHES:
            raise ValueError('Unknown branch name: %s' % branch)
    return branches

def add_builder(enabled=True, name=None, factory=None, worker=None,
                workers=None, gerrit=None, nightly=None, **kwargs):
    if not enabled:
        return
    if name is None:
        raise ValueError('builder requires a name')
    if name in _builders:
        raise ValueError('builder "%s" already defined' % (name))
    if factory is None:
        raise ValueError('builder requires a factory')
    if worker is None:
        worker = name # default to the builder name
    if workers is None:
        workers = [worker] # default is one worker
    gerrit = verify_branches(gerrit)
    nightly = verify_branches(nightly)

    # Warn about workers missing in the settings file.
    # Allow the configuration to load without them, which
    # is helpful for testing.
    workernames = set(settings.options('workers'))
    missing = list(set(workers) - workernames)
    available = list(set(workers) & workernames)
    if missing:
        for m in missing:
            print('WARNING: Worker "%s" is missing in settings.ini' % m)
    if not available:
        print('WARNING: No workers for builder "%s"' % name)
        return

    # Save branch and worker names for adding schedulers below.
    _builders[name] = dict(workers=workers, gerrit=gerrit, nightly=nightly)
    c['builders'].append(util.BuilderConfig(
        name=name,
        workernames=workers,
        factory=factories[factory],
        canStartBuild=util.enforceChosenWorker, # for force build
        **kwargs)
    )

add_builder(
    name='example-worker1',
    factory='linux',
    gerrit=None,
    nightly=None,
)

add_builder(
    name='centos7-arm64',
    factory='linux',
    gerrit=None,
    nightly=['master'],
)

add_builder(
    name='centos73-x86_64',
    factory='linux',
    gerrit='all',
    nightly='all',
)

add_builder(
    name='debian8-amd64',
    factory='linux-parallel',
    gerrit=None,
    nightly=['master', 'openafs-stable-1_8_x'],
)

add_builder(
    name='debian8-i386',
    factory='linux-parallel',
    gerrit=None,
    nightly=['master', 'openafs-stable-1_8_x'],
)

add_builder(
    name='debian87-x86_64',
    factory='linux-parallel',
    gerrit=None,
    nightly='all',
)

add_builder(
    name='debian9-amd64',
    factory='linux-parallel',
    gerrit='all',
    nightly='all',
)

add_builder(
    name='fedora20-x86_64',
    factory='linux-parallel',
    gerrit=None,
    nightly=['master'],
)

add_builder(
    name='fedora21-x86_64',
    factory='linux-parallel',
    gerrit=None,
    nightly=['master'],
)

add_builder(
    name='fedora22-x86_64',
    factory='linux-no-kmod',
    gerrit=None,
    nightly=['master'],
)

add_builder(
    name='fedora23-x86_64',
    factory='linux-no-kmod',
    gerrit=None,
    nightly=['master'],
)

add_builder(
    name='fedora24-x86_64',
    factory='linux-no-kmod',
    gerrit=None,
    nightly=['master'],
)

add_builder(
    name='fedora25-x86_64',
    factory='linux-no-kmod',
    gerrit=None,
    nightly=['master'],
)

add_builder(
    name='fedora26-x86_64',
    factory='linux-no-kmod',
    gerrit='all',
    nightly='all',
)

add_builder(
    name='fedora27-x86_64',
    factory='linux-no-kmod',
    gerrit='all',
    nightly='all',
)

add_builder(
    name='fedora28-x86_64',
    factory='linux-parallel',
    gerrit=None,
    nightly='all',
)

add_builder(
    name='fedora28-x86_64-nocheck',
    factory='linux-parallel-nocheck',
    gerrit=None,
    nightly='all',
    worker='fedora28-x86_64',
)

add_builder(
    name='irix',
    factory='irix',
    gerrit=None,
    nightly=['openafs-stable-1_6_x'],
    worker='sgi_irix_65-64bit',
    env={'CC': 'cc'},
)

add_builder(
    name='linux-rc-x86_64',
    factory='linux-rc',
    gerrit=None,
    nightly='all',
    worker='linux-rc-x86_64',
    properties={'linux-kernel-ppa':'rc'},
)

add_builder(
    name='linux-daily-x86_64',
    factory='linux-rc',
    gerrit=None,
    nightly='all',
    worker='linux-rc-x86_64',
    properties={'linux-kernel-ppa':'daily'},
)

add_builder(
    name='macos10-12-x86_64',
    factory='macos',
    gerrit=None,
    nightly=['master', 'openafs-stable-1_8_x'],
    env={
        'ARCHFLAGS': '-arch x86_64',
        'LD_LIBRARY_PATH': '/opt/local/lib',
        'PATH': ':'.join([
            '/usr/local/git/bin',
            '/usr/bin:/bin',
            '/usr/sbin:/sbin',
            '/usr/local/bin',
            '/opt/X11/bin',
            '/opt/local/bin',
            '/opt/local/sbin',
        ]),
    }
)

add_builder(
    name='opensuse-tumbleweed-i386',
    factory='linux-suse',
    gerrit=None,
    nightly=['master', 'openafs-stable-1_8_x'],
    env={'CFLAGS':'-Wno-error=format-truncation'}, # work-around current build errors
)

add_builder(
    name='opensuse-tumbleweed-x86_64',
    factory='linux-suse',
    gerrit=None,
    nightly=['master', 'openafs-stable-1_8_x'],
    env={'CFLAGS':'-Wno-error=format-truncation'}, # work-around current build errors
)

add_builder(
    name='opensuse12-x86_64',
    factory='linux-suse',
    gerrit='all',
    nightly='all',
)

add_builder(
    name='opensuse13-arm',
    factory='linux',
    gerrit=None,
    nightly=['master', 'openafs-stable-1_8_x'],
)

add_builder(
    name='rhel6-x86_64',
    factory='linux-parallel',
    gerrit=None,
    nightly=['master', 'openafs-stable-1_8_x'],
)

# TODO
#add_builder(
#    name='scan-build',
#    factory='scan-build',
#    worker='scan-build',
#)

add_builder(
    name='solaris10_x86',
    factory='solaris',
    gerrit='all',
    nightly='all',
    worker='sun510_x86',
)

add_builder(
    name='solaris11_x86',
    factory='solaris',
    gerrit='all',
    nightly='all',
    worker='sun511_x86',
)

add_builder(
    name='ubuntu14-x86_64',
    factory='linux',
    gerrit=['master', 'openafs-stable-1_8_x'],
    nightly='all',
)

add_builder(
    name='ubuntu1610-x86_64',
    factory='linux',
    gerrit=None,
    nightly=['master', 'openafs-stable-1_8_x'],
)

add_builder(
    name='ubuntu1804-amd64',
    factory='linux-no-checking',
    gerrit=None,
    nightly='all',
)

# MS Windows builders.
for arch in ('amd64', 'x86'):
    for variant in ('free', 'checked'):
        add_builder(
            name='win7_%s_%s' % (arch, variant),
            factory='win7',
            gerrit=['master', 'openafs-stable-1_8_x'],
            nightly='all',
            worker='win7-amd64',
            properties={'arch':arch, 'variant':variant},
        )

####### SCHEDULERS

c['schedulers'] = []

def scheduled(scheduler, branch):
    """Builder names assigned to given branch above."""
    builders = []
    for name,info in _builders.items():
        if branch in info[scheduler]:
            builders.append(name)
    return builders

def add_gerrit_scheduler(branch):
    if not branch in BRANCHES:
        raise ValueError('Unknown branch name: %s' % branch)
    c['schedulers'].append(schedulers.SingleBranchScheduler(
        name='gerrit-' + branch,
        change_filter=util.ChangeFilter(branch_re='^{0}/.*'.format(branch)),
        treeStableTimer=None, # Schedule immediately to build all changes.
        builderNames=scheduled('gerrit', branch),
    ))

def add_nightly_scheduler(branch, hour, minute):
    if not branch in BRANCHES:
        raise ValueError('Unknown branch name: %s' % branch)
    c['schedulers'].append(schedulers.Nightly(
        name='nightly-' + branch,
        codebases={'openafs':{'repository':REPO, 'branch':branch}},
        builderNames=scheduled('nightly', branch),
        hour=hour, minute=minute,
    ))

def add_force_scheduler(builder):
    workers = _builders[builder]['workers']
    c['schedulers'].append(schedulers.ForceScheduler(
        name='force-'+builder,
        buttonName='Force build',
        label='Force build '+builder,
        builderNames=[builder],
        reason=util.StringParameter(
            name='reason',
            label='Reason:',
            default='force build',
            required=True,
            size=80,
        ),
        codebases=[
            util.CodebaseParameter(
                "",
                label='Repository',
                # Generate just the branch entry in the form, but revision,
                # repository, and project are needed by buildbot scheduling
                # system so we need to pass an empty value ("") for those.
                # Note: branch value may be a gerrit change id branch.
                branch=util.StringParameter(
                    name='branch',
                    label='Branch:',
                    default='master',
                    required=True,
                    size=80,
                ),
                revision=util.FixedParameter(name="revision", default=""),
                repository=util.FixedParameter(name="repository", default=""),
                project=util.FixedParameter(name="project", default=""),
            ),
        ],
        properties=[
            util.WorkerChoiceParameter(
                label='Worker:',
                default=workers[0],
                choices=workers,
            ),
        ],
    ))


add_gerrit_scheduler('master')
add_gerrit_scheduler('openafs-stable-1_8_x')
add_gerrit_scheduler('openafs-stable-1_6_x')
add_nightly_scheduler('master', 0, 0)
add_nightly_scheduler('openafs-stable-1_8_x', 1, 0)
add_nightly_scheduler('openafs-stable-1_6_x', 2, 0)
for builder in _builders:
    add_force_scheduler(builder)

####### BUILDBOT SERVICES

def gerrit_summary_callback(buildInfoList, results, status, arg):
    success = False
    failure = False
    msgs = ['New Buildbot Master', '']
    for buildInfo in buildInfoList:
        msg = "Builder %(name)s %(resultText)s (%(text)s)" % buildInfo
        link = buildInfo.get('url', None)
        if link:
            msg += " - " + link
        else:
            msg += "."
        msgs.append(msg)
        if buildInfo['result'] == util.SUCCESS:
            success = True
        else:
            failure = True
    message = '\n\n'.join(msgs)
    if success and not failure:
        verified = 1
    else:
        verified = 0
    return dict(message=message,
                labels={'Verified': verified})

# Email templates for nightly linux-rc builders.
body = '''\
The buildbot has detected a {{ status_detected }} on builder {{ buildername }} while building {{ (build['properties'].get('branch', ['unknown']))[0] }}

Build Reason: {{ build['properties'].get('reason', ["<unknown>"])[0] }}

{{ summary }}

Full details are available at:
    {{ build_url }}

The OpenAFS Buildbot,
{{ buildbot_url }}
'''

c['services'] = [
    reporters.GerritStatusPush(
        server='gerrit.openafs.org',
        username='buildbot',
        port=29418,
        identity_file=os.path.expanduser('~/.ssh/gerrit'),
        summaryCB=gerrit_summary_callback,
    ),
    reporters.MailNotifier(
        fromaddr='buildbot@openafs.MIT.EDU',
        builders=['linux-rc-x86_64'],
        mode=['failing', 'passing'],
        sendToInterestedUsers=False,
        extraRecipients=settings.get('mail', 'to', fallback='').split(),
        messageFormatter=reporters.MessageFormatter(
            template=body,
        ),
    ),
]

####### WEB UI

c['title'] = 'OpenAFS Buildbot'
c['titleURL'] = 'https://www.openafs.org/'
c['buildbotURL'] = settings.get('local', 'buildbotURL', fallback='https://buildbot.openafs.org/')

auth = util.UserPasswordAuth(settings.items('admins'))
authz = util.Authz(
    allowRules=[
        util.AnyControlEndpointMatcher(role='admins'),
    ],
    roleMatchers=[
        util.RolesFromEmails(admins=settings.options('admins'))
    ],
)

c['www'] = {
    'port': 8010,
    'auth': auth,
    'authz': authz,
    'plugins': {
        'waterfall_view': {},
        'console_view': {},
        'grid_view': {},
    },
}

####### DATA HORIZON

c['configurators'] = [
    # Delete all logs older than one month every Sunday at noon.
    util.JanitorConfigurator(
        logHorizon=datetime.timedelta(weeks=4),
        hour=12,
        dayOfWeek=6
    ),
]

####### DB URL

c['db'] = {'db_url' : 'sqlite:///state.sqlite'}
