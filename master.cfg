# -*- python -*-
# ex: set filetype=python:

import os
import configparser
from buildbot.plugins import changes
from buildbot.plugins import reporters
from buildbot.plugins import schedulers
from buildbot.plugins import steps
from buildbot.plugins import util
from buildbot.plugins import worker

BuildmasterConfig = c = {}

####### CONSTANTS

REPO = 'git://git.openafs.org/openafs.git'

####### LOCAL SETTINGS

settings_ini = os.path.expanduser(os.path.join(basedir, 'settings.ini'))
settings = configparser.ConfigParser()
settings.read([settings_ini])

####### FEATURES

c['buildbotNetUsageData'] = None # Disable phone-home feature.

####### WORKERS

c['protocols'] = {'pb': {'port': 9986}}

worker_config = {
    'example-worker1': dict(max_builds=1),
}

c['workers'] = []
for name,password in settings.items('workers'):
    kwargs = worker_config.get(name, {})
    c['workers'].append(worker.Worker(name, password, **kwargs))

####### CHANGESOURCES

c['change_source'] = [
    changes.GerritChangeSource(
        gerritserver='gerrit.openafs.org',
        gerritport=29418,
        username='buildbot',
        identity_file=os.path.expanduser('~/.ssh/gerrit'),
        debug=True,
    ),
]

####### BUILD STEPS

def shell(*args, timeout=3600, **kwargs):
    return steps.ShellCommand(command=args, timeout=timeout, **kwargs)

def checkout():
    return steps.Gerrit(repourl=REPO, mode='full', method='fresh', retryFetch=True, timeout=3600)

def git_show():
    return shell('git', 'log', '-n', '1', '--stat')

def regen(quick=False, **kwargs):
    args = ['/bin/sh', 'regen.sh']
    if quick:
        args.append('-q')
    return shell(*args, name='regen', **kwargs)

def configure(*args, **kwargs):
    return steps.Configure(command=['./configure'] + list(args), **kwargs)

def make(*targets, cmd='make', target=None, jobs=None, **kwargs):
    args = [cmd]
    if jobs:
        args.append('-j{0}'.format(jobs))
    if len(targets) != 0:
        args += targets
    return steps.Compile(command=args, **kwargs)

####### BUILD FACTORIES

factories = {}

def add_factory(name, *steps):
    factories[name] = util.BuildFactory(steps)

add_factory('generic',
    checkout(),
    regen(),
    configure(),
    make(),
)

# XXX: The git clean/git gc steps were cargo culted from the
#      old buildbot master config.

add_factory('irix',
    checkout(),
    git_show(),
    shell('git', 'clean', '-X', '-f', '-e', '!.buildbot-sourcedata'),
    shell('git', 'gc', '--auto'),
    regen(),
    configure(
        '--enable-checking',
        '--enable-supergroups',
        '--enable-namei-fileserver',
        '--with-krb5=/usr/nekoware',
        '--enable-pthreaded-ubik',
        env={'CC':'cc'},
    ),
    make(cmd='gmake'),   #TODO: , warningPattern='.*cc:? WARNING'),
    make('dest')         #TODO: , warningPattern='.*cc:? WARNING'),
)

add_factory('linux',
    checkout(),
    git_show(),
    shell('git', 'clean', '-d', '-x', '-f', '-e', '.buildbot-sourcedata'),
    shell('git', 'clean', '-d', '-X', '-f', '-e', '!.buildbot-sourcedata'),
    shell('git', 'gc', '--auto'),
    regen(),
    configure(
        '--enable-checking',
        '--enable-supergroups',
        '--enable-namei-fileserver',
        '--enable-pthreaded-ubik',
    ),
    make(),
)

add_factory('rhel6',
    checkout(),
    git_show(),
    shell('git', 'clean', '-x', '-f', '-d'),
    shell('git', 'gc', '--auto'),
    regen(),
    configure('--enable-supergroups', '--enable-namei-fileserver', '--enable-pthreaded-ubik'),
    make(jobs=4),
    make('dest', jobs=4),
)

add_factory('fedora20',
    checkout(),
    git_show(),
    shell('git', 'clean', '-d', '-x', '-f', '-e', '.buildbot-sourcedata'),
    shell('git', 'clean', '-d', '-X', '-f'),
    shell('git', 'gc', '--auto'),
    regen(),
    configure('--enable-supergroups', '--enable-namei-fileserver', '--enable-pthreaded-ubik'),
    make(jobs=4),
    make('dest', jobs=4),
)

add_factory('fedora21',
    checkout(),
    git_show(),
    shell('git', 'clean', '-d', '-x', '-f', '-e', '.buildbot-sourcedata'),
    shell('git', 'clean', '-d', '-X', '-f'),
    shell('git', 'gc', '--auto'),
    regen(),
    configure('--enable-supergroups', '--enable-namei-fileserver', '--enable-pthreaded-ubik'),
    make(jobs=4),
    make('dest', jobs=4),
)

add_factory('fedora',
    checkout(),
    git_show(),
    shell('git', 'clean', '-d', '-x', '-f', '-e', '.buildbot-sourcedata'),
    shell('git', 'clean', '-d', '-X', '-f'),
    shell('git', 'gc', '--auto'),
    regen(),
    configure(
        '--enable-supergroups',
        '--enable-namei-fileserver',
        '--enable-pthreaded-ubik',
        '--disable-kernel-module',
        '--with-afs-sysname=amd64_linux26',
    ),
    make(jobs=4),
    make('dest', jobs=4),
)

add_factory('suse',
    checkout(),
    git_show(),
    shell('git', 'gc', '--auto'),
    shell('git', 'clean', '-X', '-f', '-e', '!.buildbot-sourcedata'),
    regen(),
    configure(
        '--enable-checking',
        '--enable-supergroups',
        '--enable-namei-fileserver',
        '--enable-pthreaded-ubik',
        '--with-linux-kernel-build=/usr/src/linux-obj/x86_64/default',
    ),
    make(),
    make('dest'),
)

add_factory('suse-tumbleweed',
    checkout(),
    git_show(),
    shell('git', 'clean', '-X', '-f', '-e', '!.buildbot-sourcedata'),
    shell('git', 'gc', '--auto'),
    regen(),
    configure(
        '--enable-checking',
        '--enable-supergroups',
        '--enable-namei-fileserver',
        '--enable-pthreaded-ubik',
        '--with-linux-kernel-build=/usr/src/linux-obj/x86_64/default',
        env={'CFLAGS':'-Wno-error=format-truncation'},
    ),
    make(),
    make('dest'),
)

# TODO: move env to the builder!
macintel_env = {
    'ARCHFLAGS':'-arch x86_64',
    'PATH':'/usr/local/git/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/opt/local/bin:/opt/local/sbin',
    'LD_LIBRARY_PATH':'/opt/local/lib'
}

add_factory('mac-intel',
    checkout(),
    git_show(),
    shell('git', 'gc', '--auto', env=macintel_env),
    shell('git', 'clean', '-X', '-f', '-d', '-e', '!.buildbot-sourcedata', env=macintel_env),
    regen(env=macintel_env),
    configure(
        '--enable-transarc-paths',
        '--enable-pthreaded-ubik',
        '--enable-warnings',
        '--disable-pam',
        env=macintel_env,
    ),
    make('dest', env=macintel_env),
)

add_factory('debian',
    checkout(),
    git_show(),
    regen(),
    configure(
        '--enable-supergroups',
        '--enable-namei-fileserver',
        '--enable-pthreaded-ubik',
    ),
    make(jobs=5),
)

add_factory('freebsd100',
    checkout(),
    git_show(),
    shell('git', 'clean', '-X', '-f', '-e', '!.buildbot-sourcedata'),
    shell('git', 'gc', '--auto'),
    regen(),
    configure(
        '--enable-supergroups',
        '--enable-warnings',
        '--enable-namei-fileserver',
        '--with-bsd-kernel-headers=/usr/src/sys',
        '--with-bsd-kernel-build=/usr/obj/usr/src/sys/GENERIC',
    ),
    make(),
    make('dest'),
)

add_factory('solaris10_x86',
    checkout(),
    git_show(),
    shell('git', 'clean', '-X', '-f', '-e', '!.buildbot-sourcedata'),
    shell('git', 'gc', '--auto'),
    regen(),
    configure(
        '--enable-debug',
        '--disable-optimize',
        '--enable-debug-kernel',
        '--disable-optimize-kernel',
        '--enable-transarc-paths',
        '--enable-namei-fileserver',
    ),
    make(),
    make('dest'),
)

add_factory('solaris11_x86',
    checkout(),
    git_show(),
    shell('git', 'clean', '-X', '-f', '-e', '!.buildbot-sourcedata'),
    shell('git', 'gc', '--auto'),
    regen(),
    configure(
        '--enable-debug',
        '--disable-optimize',
        '--enable-debug-kernel',
        '--disable-optimize-kernel',
        '--enable-transarc-paths',
        '--enable-namei-fileserver',
    ),
    make(),
    make('dest'),
)

add_factory('centos73',
    checkout(),
    git_show(),
    shell('git', 'clean', '-x', '-f', '-d'),
    shell('git', 'gc', '--auto'),
    regen(),
    regen(),
    configure(
        '--enable-checking',
        '--enable-transarc-paths',
        '--enable-supergroups',
        '--enable-pthreaded-ubik',
    ),
    make(),
    make('dest'),
)

add_factory('ubuntu1610',
    checkout(),
    git_show(),
    shell('git', 'clean', '-x', '-f', '-d'),
    shell('git', 'gc', '--auto'),
    regen(),
    regen(),
    configure(
        '--enable-checking',
        '--enable-transarc-paths',
        '--enable-supergroups',
        '--enable-pthreaded-ubik'
    ),
    make(),
    make('dest'),
)

add_factory('win_amd64_free',
    checkout(),
    shell('build-openafs.cmd', 'amd64', 'free'),
)

add_factory('win_amd64_checked',
    checkout(),
    shell('build-openafs.cmd', 'amd64', 'checked'),
)

add_factory('win_x86_free',
    checkout(),
    shell('build-openafs.cmd', 'x86', 'free'),
)

add_factory('win_x86_checked',
    checkout(),
    shell('build-openafs.cmd', 'x86', 'checked'),
)

add_factory('linux-rc',
    shell(
        '/usr/local/bin/virt-run',
        '--base', 'ubuntu1804',
        '--base-prefix', 'zz-',
        '--clone-prefix', 'tmp-',
        '--user', 'buildbot',
        '--wait', '30',
        util.WithProperties('kernel-ppa get %(linux_kernel_ppa:-)s'),
        'sudo kernel-ppa install',
        '@reboot',
        'uname -a',
        'gcc --version',
        'mkdir openafs',
        '@cd openafs',
        'git init',
        util.WithProperties('git fetch --quiet https://gerrit.openafs.org/openafs.git %(branch)s'),
        'git reset --hard FETCH_HEAD',
        'git --no-pager log -n1 --stat',
        './regen.sh',
        './configure',
        'make',
    ),
)

add_factory('scan-build',
    checkout(),
    git_show(),
    regen(quick=True),
    configure('--enable-debug', '--enable-debug-kernel'),
#    ScanBuild(
#    make=['make', '-j', '4', 'all'],
#    output='/afs/sinenomine.net/public/openafs/scan-build',
#    baseurl='https://download.sinenomine.net',
#    docroot='/afs/sinenomine.net/public'),
)

####### BUILDERS

c['builders'] = []

def add_builder(name, factory, workers):
    bc = util.BuilderConfig(
        name=name,
        workernames=workers,
        factory=factories[factory],
        canStartBuild=util.enforceChosenWorker,
    )
    c['builders'].append(bc)

add_builder('nightly', 'generic', ['example-worker1', 'example-worker2'])
add_builder('gerrit', 'generic', ['example-worker1'])


####### SCHEDULERS

c['schedulers'] = [
    schedulers.SingleBranchScheduler(
        name='gerrit-master',
        change_filter=util.ChangeFilter(branch_re="^master/.*"),
        treeStableTimer=120, # seconds
        builderNames=['gerrit'],
    ),
    schedulers.Nightly(
        name='nightly master',
        branch='master',
        builderNames=['nightly'],
        hour=3, minute=0,
    ),
    schedulers.ForceScheduler(
        name='force',
        builderNames=['gerrit', 'nightly'],
        properties=[util.WorkerChoiceParameter()],
    ),
]

####### BUILDBOT SERVICES

def gerrit_summary_callback(buildInfoList, results, status, arg):
    success = False
    failure = False
    msgs = []
    for buildInfo in buildInfoList:
        msg = "Builder %(name)s %(resultText)s (%(text)s)" % buildInfo
        link = buildInfo.get('url', None)
        if link:
            msg += " - " + link
        else:
            msg += "."
        msgs.append(msg)
        if buildInfo['result'] == util.SUCCESS:
            success = True
        else:
            failure = True
    msg = '\n\n'.join(msgs)
    if success and not failure:
        verified = 1
    else:
        verified = 0
    return dict(message='\n\n'.join(msgs),
                labels={'Verified': verified})

c['services'] = [
    reporters.GerritStatusPush(
        server='gerrit.openafs.org',
        username='buildbot',
        port=29418,
        identity_file=os.path.expanduser('~/.ssh/gerrit'),
        summaryCB=gerrit_summary_callback,
    ),
]

####### WEB UI

c['title'] = 'OpenAFS Buildbot'
c['titleURL'] = 'https://www.openafs.org/'
c['buildbotURL'] = settings.get('local', 'buildbotURL', fallback='http://buildbot.openafs.org:8011/')

auth = util.UserPasswordAuth(settings.items('admins'))
authz = util.Authz(
    allowRules=[
        util.AnyControlEndpointMatcher(role='admins'),
    ],
    roleMatchers=[
        util.RolesFromEmails(admins=settings.options('admins'))
    ],
)

c['www'] = {
    'port': 8011,
    'auth': auth,
    'authz': authz,
    'plugins': {
        'waterfall_view': {},
        'console_view': {},
        'grid_view': {},
    },
}

####### DB URL

c['db'] = {'db_url' : 'sqlite:///state.sqlite'}
