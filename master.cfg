# -*- python -*-
# ex: set filetype=python:

import os
import configparser
import datetime
from buildbot.plugins import changes
from buildbot.plugins import reporters
from buildbot.plugins import schedulers
from buildbot.plugins import steps
from buildbot.plugins import util
from buildbot.plugins import worker

BuildmasterConfig = c = {}

####### CONSTANTS

REPO = 'git://git.openafs.org/openafs.git'
ALL_BRANCHES = ('master', 'openafs-stable-1_8_x', 'openafs-stable-1_6_x')

####### LOCAL SETTINGS

settings_ini = os.path.expanduser(os.path.join(basedir, 'settings.ini'))
settings = configparser.ConfigParser()
settings.read([settings_ini])

####### FEATURES

c['buildbotNetUsageData'] = None # Disable phone-home feature.

####### WORKERS

c['protocols'] = {'pb': {'port': 9989}}

worker_config = {
    'linux-rc-x86_64': dict(max_builds=1),
}

c['workers'] = []
for name,password in settings.items('workers'):
    kwargs = worker_config.get(name, {})
    c['workers'].append(worker.Worker(name, password, **kwargs))

####### CHANGESOURCES

c['change_source'] = [
    changes.GerritChangeSource(
        gerritserver='gerrit.openafs.org',
        gerritport=29418,
        username='buildbot',
        identity_file=os.path.expanduser('~/.ssh/gerrit'),
        debug=False,
    ),
]

####### BUILD STEPS

def scheduler_is_gerrit(step):
    return step.getProperty('scheduler').startswith('gerrit')

def shell(*args, timeout=3600, **kwargs):
    return steps.ShellCommand(command=args, timeout=timeout, **kwargs)

def sleep():
    # Delay to allow gerrit commits to be ready.
    return shell('sleep', '120', name='sleep', doStepIf=scheduler_is_gerrit)

def wsleep():
    # Delay to allow gerrit commits to be ready; variant for windows.
    return shell('ping', '-n', '120', 'localhost', name='sleep', doStepIf=scheduler_is_gerrit)

def git_checkout():
    return steps.Gerrit(repourl=REPO, mode='full', method='fresh', retryFetch=True, timeout=3600)

def git_show():
    return shell('git', 'log', '-n', '1', '--stat', name='git show')

def git_clean():
    return shell('git', 'clean', '-q', '-x', '-f', '-d', name='git clean')

def git_gc():
    return shell('git', 'gc', '--auto', name='git gc')

def regen(quick=False, **kwargs):
    args = ['/bin/sh', 'regen.sh']
    if quick:
        args.append('-q')
    return shell(*args, name='regen', **kwargs)

def configure(*args, **kwargs):
    return steps.Configure(command=['./configure'] + list(args), **kwargs)

def make(*targets, cmd='make', target=None, jobs=None, **kwargs):
    args = [cmd]
    if jobs:
        args.append('-j{0}'.format(jobs))
    if len(targets) != 0:
        args += targets
    return steps.Compile(command=args, **kwargs)

####### BUILD FACTORIES

factories = {}

def add_factory(name, *steps):
    factories[name] = util.BuildFactory(steps)

add_factory('linux',
    sleep(),
    git_checkout(),
    git_show(),
    git_clean(),
    git_gc(),
    regen(),
    configure(
        '--enable-checking',
        '--enable-supergroups',
        '--enable-namei-fileserver',
        '--enable-pthreaded-ubik',
    ),
    make(),
)

add_factory('linux-parallel',
    sleep(),
    git_checkout(),
    git_show(),
    git_clean(),
    git_gc(),
    regen(),
    configure(
        '--enable-warnings',
        '--enable-checking',
        '--enable-supergroups',
        '--enable-namei-fileserver',
        '--enable-pthreaded-ubik',
    ),
    make(jobs=4),
)

add_factory('linux-parallel-nocheck',
    sleep(),
    git_checkout(),
    git_show(),
    git_clean(),
    git_gc(),
    regen(),
    configure(
        '--disable-checking',
        '--enable-supergroups',
        '--enable-namei-fileserver',
        '--enable-pthreaded-ubik',
    ),
    make(jobs=4),
)

add_factory('linux-no-checking',
    sleep(),
    git_checkout(),
    git_show(),
    git_clean(),
    git_gc(),
    regen(),
    configure(
        '--disable-checking',
        '--enable-supergroups',
        '--enable-namei-fileserver',
        '--enable-pthreaded-ubik',
    ),
    make(),
)

add_factory('linux-no-kmod',
    sleep(),
    git_checkout(),
    git_show(),
    git_clean(),
    git_gc(),
    regen(),
    configure(
        '--enable-supergroups',
        '--enable-namei-fileserver',
        '--enable-pthreaded-ubik',
        '--disable-kernel-module',
        '--with-afs-sysname=amd64_linux26',
    ),
    make(jobs=4),
)

add_factory('linux-suse',
    sleep(),
    git_checkout(),
    git_show(),
    git_clean(),
    git_gc(),
    regen(),
    configure(
        '--enable-checking',
        '--enable-supergroups',
        '--enable-namei-fileserver',
        '--enable-pthreaded-ubik',
        '--with-linux-kernel-build=/usr/src/linux-obj/x86_64/default',
    ),
    make(),
)

add_factory('macos',
    sleep(),
    git_checkout(),
    git_show(),
    git_clean(),
    git_gc(),
    regen(),
    configure(
        '--enable-transarc-paths',
        '--enable-pthreaded-ubik',
        '--enable-warnings',
        '--disable-pam',
    ),
    make('dest'),
)

add_factory('freebsd',
    sleep(),
    git_checkout(),
    git_show(),
    git_clean(),
    git_gc(),
    regen(),
    configure(
        '--enable-supergroups',
        '--enable-warnings',
        '--enable-namei-fileserver',
        '--with-bsd-kernel-headers=/usr/src/sys',
        '--with-bsd-kernel-build=/usr/obj/usr/src/sys/GENERIC',
    ),
    make('dest'),
)

add_factory('solaris',
    sleep(),
    git_checkout(),
    git_show(),
    git_clean(),
    git_gc(),
    regen(),
    configure(
        '--enable-debug',
        '--disable-optimize',
        '--enable-debug-kernel',
        '--disable-optimize-kernel',
        '--enable-transarc-paths',
        '--enable-namei-fileserver',
    ),
    make('dest'),
)

add_factory('irix',
    sleep(),
    git_checkout(),
    git_show(),
    git_clean(),
    git_gc(),
    regen(),
    configure(
        '--enable-checking',
        '--enable-supergroups',
        '--enable-namei-fileserver',
        '--with-krb5=/usr/nekoware',
        '--enable-pthreaded-ubik',
    ),
    make(cmd='gmake'),
    make('dest')
)

add_factory('linux-rc',
    shell('virt-run-build.sh',
        '--branch', util.Property('branch', default='master'),
        '--linux', util.Property('linux-kernel-ppa', default='rc'),
        '--smoke-test',
        name='virt-run-build',
    ),
)

# TODO: port ScanBuild
#add_factory('scan-build',
#    git_checkout(),
#    git_show(),
#    git_gc(),
#    regen(quick=True),
#    configure('--enable-debug', '--enable-debug-kernel'),
#    ScanBuild(
#    make=['make', '-j', '4', 'all'],
#    output='/afs/sinenomine.net/public/openafs/scan-build',
#    baseurl='https://download.sinenomine.net',
#    docroot='/afs/sinenomine.net/public'),
#)

####### BUILD QUEUES

c['builders'] = []

_schedulers = {}
_builders = {}

def add_builder(enabled=True, name=None, factory=None, worker=None,
                workers=None, gerrit=None, nightly=None, **kwargs):
    if name is None:
        raise ValueError('builder requires a name')
    if factory is None:
        raise ValueError('builder requires a factory')
    if worker is None:
        worker = name # default to the builder name
    if workers is None:
        workers = [worker] # default is one worker
    if not enabled:
        return
    def schedule(trigger, branches):
        if isinstance(branches, str):
            branches = [branches]
        for branch in branches:
            s = (trigger, branch)
            if s not in _schedulers:
                _schedulers[s] = set()
            _schedulers[s].add(name)
    if gerrit:
        schedule('gerrit', gerrit)
    if nightly:
        schedule('nightly', nightly)
    _builders[name] = workers
    c['builders'].append(util.BuilderConfig(
        name=name,
        workernames=workers,
        factory=factories[factory],
        canStartBuild=util.enforceChosenWorker, # for force build
        **kwargs)
    )

add_builder(
    name='centos7-arm64',
    factory='linux',
    nightly=['master'],
)

add_builder(
    name='centos73-x86_64',
    factory='linux',
    gerrit=ALL_BRANCHES,
    nightly=ALL_BRANCHES,
)

add_builder(
    name='debian8-amd64',
    factory='linux-parallel',
    nightly=['master', 'openafs-stable-1_8_x'],
)

add_builder(
    name='debian8-i386',
    factory='linux-parallel',
    nightly=['master', 'openafs-stable-1_8_x'],
)

add_builder(
    name='debian87-x86_64',
    factory='linux-parallel',
    nightly=ALL_BRANCHES,
)

add_builder(
    name='debian9-amd64',
    factory='linux-parallel',
    gerrit=ALL_BRANCHES,
    nightly=ALL_BRANCHES,
)

add_builder(
    name='fedora20-x86_64',
    factory='linux-parallel',
    nightly=['master'],
)

add_builder(
    name='fedora21-x86_64',
    factory='linux-parallel',
    nightly=['master'],
)

add_builder(
    name='fedora22-x86_64',
    factory='linux-no-kmod',
    nightly=['master'],
)

add_builder(
    name='fedora23-x86_64',
    factory='linux-no-kmod',
    nightly=['master'],
)

add_builder(
    name='fedora24-x86_64',
    factory='linux-no-kmod',
    nightly=['master'],
)

add_builder(
    name='fedora25-x86_64',
    factory='linux-no-kmod',
    nightly=['master'],
)

add_builder(
    name='fedora26-x86_64',
    factory='linux-no-kmod',
    gerrit=ALL_BRANCHES,
    nightly=ALL_BRANCHES,
)

add_builder(
    name='fedora27-x86_64',
    factory='linux-no-kmod',
    gerrit=ALL_BRANCHES,
    nightly=ALL_BRANCHES,
)

add_builder(
    name='fedora28-x86_64',
    factory='linux-parallel',
    #gerrit=ALL_BRANCHES,
    nightly=ALL_BRANCHES,
)

add_builder(
    name='fedora28-x86_64-nocheck',
    worker='fedora28-x86_64',
    factory='linux-parallel-nocheck',
    #gerrit=ALL_BRANCHES,
    nightly=ALL_BRANCHES,
)

add_builder(
    name='irix',
    factory='irix',
    worker='sgi_irix_65-64bit',
    nightly=['openafs-stable-1_6_x'],
    env={'CC': 'cc'},
)

add_builder(
    name='linux-rc-x86_64',
    factory='linux-rc',
    worker='linux-rc-x86_64',
    properties={'linux-kernel-ppa':'rc'},
    nightly=ALL_BRANCHES,
)

add_builder(
    name='linux-daily-x86_64',
    factory='linux-rc',
    worker='linux-rc-x86_64',
    properties={'linux-kernel-ppa':'daily'},
    nightly=ALL_BRANCHES,
)

add_builder(
    name='macos10-12-x86_64',
    factory='macos',
    nightly=['master', 'openafs-stable-1_8_x'],
    env={
        'ARCHFLAGS': '-arch x86_64',
        'LD_LIBRARY_PATH': '/opt/local/lib',
        'PATH': ':'.join([
            '/usr/local/git/bin',
            '/usr/bin:/bin',
            '/usr/sbin:/sbin',
            '/usr/local/bin',
            '/opt/X11/bin',
            '/opt/local/bin',
            '/opt/local/sbin',
        ]),
    }
)

add_builder(
    name='opensuse-tumbleweed-i386',
    factory='linux-suse',
    nightly=['master', 'openafs-stable-1_8_x'],
    env={'CFLAGS':'-Wno-error=format-truncation'}, # work-around current build errors
)

add_builder(
    name='opensuse-tumbleweed-x86_64',
    factory='linux-suse',
    nightly=['master', 'openafs-stable-1_8_x'],
    env={'CFLAGS':'-Wno-error=format-truncation'}, # work-around current build errors
)

add_builder(
    name='opensuse12-x86_64',
    factory='linux-suse',
    gerrit=ALL_BRANCHES,
    nightly=ALL_BRANCHES,
)

add_builder(
    name='opensuse13-arm',
    factory='linux',
    nightly=['master', 'openafs-stable-1_8_x'],
)

add_builder(
    name='rhel6-x86_64',
    factory='linux-parallel',
    nightly=['master', 'openafs-stable-1_8_x'],
)

# TODO
#add_builder(
#    name='scan-build',
#    factory='scan-build',
#    worker='scan-build',
#)

add_builder(
    name='solaris10_x86',
    factory='solaris',
    worker='sun510_x86',
    gerrit=ALL_BRANCHES,
    nightly=ALL_BRANCHES,
)

add_builder(
    name='solaris11_x86',
    factory='solaris',
    worker='sun511_x86',
    gerrit=ALL_BRANCHES,
    nightly=ALL_BRANCHES,
)

add_builder(
    name='ubuntu14-x86_64',
    factory='linux',
    gerrit=['master', 'openafs-stable-1_8_x'],
    nightly=ALL_BRANCHES,
)

add_builder(
    name='ubuntu1610-x86_64',
    factory='linux',
    nightly=['master', 'openafs-stable-1_8_x'],
)

add_builder(
    name='ubuntu1804-amd64',
    factory='linux-no-checking',
    #gerrit=ALL_BRANCHES,
    nightly=ALL_BRANCHES,
)

# MS Windows builders.
for arch in ('amd64', 'x86'):
    for variant in ('free', 'checked'):
        name = 'win7_%s_%s' % (arch, variant)
        add_factory(
            name,
            wsleep(),
            git_checkout(),
            git_show(),
            git_clean(),
            git_gc(),
            shell('build-openafs.cmd', arch, variant, name='build'),
        )
        add_builder(
            name=name,
            factory=name,
            worker='win7-amd64',
            gerrit=['master', 'openafs-stable-1_8_x'],
            nightly=ALL_BRANCHES,
        )

####### SCHEDULERS

c['schedulers'] = []

def add_branch_scheduler(branch, builders):
    c['schedulers'].append(schedulers.SingleBranchScheduler(
        name='gerrit-' + branch,
        change_filter=util.ChangeFilter(branch_re='^{0}/.*'.format(branch)),
        treeStableTimer=None, # Schedule immediately to build all changes.
        builderNames=builders,
    ))

def add_nightly_scheduler(branch, hour, minute, builders):
    c['schedulers'].append(schedulers.Nightly(
        name='nightly-' + branch,
        codebases={'openafs':{'repository':REPO, 'branch':branch}},
        builderNames=builders,
        hour=hour, minute=minute,
    ))

def add_force_scheduler(builder, workers):
    c['schedulers'].append(schedulers.ForceScheduler(
        name='force-'+builder,
        buttonName='Force build',
        label='Force build '+builder,
        builderNames=[builder],
        reason=util.StringParameter(
            name='reason',
            label='Reason:',
            default='force build',
            required=True,
            size=80,
        ),
        codebases=[
            util.CodebaseParameter(
                "",
                label='Repository',
                # Generate just the branch entry in the form, but revision,
                # repository, and project are needed by buildbot scheduling
                # system so we need to pass an empty value ("") for those.
                # Note: branch value may be a gerrit change id branch.
                branch=util.StringParameter(
                    name='branch',
                    label='Branch:',
                    default='master',
                    required=True,
                    size=80,
                ),
                revision=util.FixedParameter(name="revision", default=""),
                repository=util.FixedParameter(name="repository", default=""),
                project=util.FixedParameter(name="project", default=""),
            ),
        ],
        properties=[
            util.WorkerChoiceParameter(
                label='Worker:',
                default=workers[0],
                choices=workers,
            ),
        ],
    ))

def next_time(hour, minute):
    return ((hour + 1) % 24, minute)

def add_schedulers():
    hour,minute = 0,0
    for s in _schedulers:
        trigger,branch = s
        builders = list(_schedulers[s])
        if trigger == 'gerrit':
            add_branch_scheduler(branch, builders)
        elif trigger == 'nightly':
            add_nightly_scheduler(branch, hour, minute, builders)
            hour,minute = next_time(hour,minute)
        else:
            raise AssertionError('bad trigger name: ' + trigger)
    for b in _builders:
        workers = _builders[b]
        add_force_scheduler(b, workers)

add_schedulers()

####### BUILDBOT SERVICES

def gerrit_summary_callback(buildInfoList, results, status, arg):
    success = False
    failure = False
    msgs = ['New Buildbot Master', '']
    for buildInfo in buildInfoList:
        msg = "Builder %(name)s %(resultText)s (%(text)s)" % buildInfo
        link = buildInfo.get('url', None)
        if link:
            msg += " - " + link
        else:
            msg += "."
        msgs.append(msg)
        if buildInfo['result'] == util.SUCCESS:
            success = True
        else:
            failure = True
    message = '\n\n'.join(msgs)
    if success and not failure:
        verified = 1
    else:
        verified = 0
    return dict(message=message,
                labels={'Verified': verified})

c['services'] = [
    reporters.GerritStatusPush(
        server='gerrit.openafs.org',
        username='buildbot',
        port=29418,
        identity_file=os.path.expanduser('~/.ssh/gerrit'),
        summaryCB=gerrit_summary_callback,
    ),
    reporters.MailNotifier(
        fromaddr='buildbot@openafs.MIT.EDU',
        builders=['linux-rc-x86_64'],
        mode=['failing', 'passing'],
        sendToInterestedUsers=False,
        extraRecipients=settings.get('mail', 'to', fallback='').split(),
    ),
]

####### WEB UI

c['title'] = 'OpenAFS Buildbot'
c['titleURL'] = 'https://www.openafs.org/'
c['buildbotURL'] = settings.get('local', 'buildbotURL', fallback='https://buildbot.openafs.org/')

auth = util.UserPasswordAuth(settings.items('admins'))
authz = util.Authz(
    allowRules=[
        util.AnyControlEndpointMatcher(role='admins'),
    ],
    roleMatchers=[
        util.RolesFromEmails(admins=settings.options('admins'))
    ],
)

c['www'] = {
    'port': 8010,
    'auth': auth,
    'authz': authz,
    'plugins': {
        'waterfall_view': {},
        'console_view': {},
        'grid_view': {},
    },
}

####### DATA HORIZON

c['configurators'] = [
    # Delete all logs older than one month every Sunday at noon.
    util.JanitorConfigurator(
        logHorizon=datetime.timedelta(weeks=4),
        hour=12,
        dayOfWeek=6
    ),
]

####### DB URL

c['db'] = {'db_url' : 'sqlite:///state.sqlite'}
